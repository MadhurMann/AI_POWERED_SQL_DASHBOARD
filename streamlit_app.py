import streamlit as st
import requests
import datetime
import json
import pandas as pd
from typing import Dict, Any, Optional
import time

# Configuration
BASE_URL = "http://localhost:8000"  # Backend endpoint
REQUEST_TIMEOUT = 30  # seconds

# Page configuration
st.set_page_config(
    page_title="🔫 AI Powered SQL Dashboard",
    page_icon="🔫",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS for better styling
st.markdown("""
<style>
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        border-left: 4px solid #1f77b4;
        background-color: #f8f9fa;
    }
    .user-message {
        border-left-color: #28a745;
        background-color: #e8f5e9;
    }
    .error-message {
        border-left-color: #dc3545;
        background-color: #f8d7da;
        color: #721c24;
    }
    .success-message {
        border-left-color: #28a745;
        background-color: #d4edda;
        color: #155724;
    }
</style>
""", unsafe_allow_html=True)

def make_api_request(endpoint: str, payload: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    """Make API request with proper error handling and timeout."""
    try:
        response = requests.post(
            f"{BASE_URL}/{endpoint}",
            json=payload,
            timeout=REQUEST_TIMEOUT,
            headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.ConnectionError:
        st.error("❌ Could not connect to the backend server. Please ensure it's running on localhost:8000")
        return None
    except requests.exceptions.Timeout:
        st.error(f"⏱️ Request timed out after {REQUEST_TIMEOUT} seconds. Please try again.")
        return None
    except requests.exceptions.HTTPError as e:
        st.error(f"❌ Server error: {e.response.status_code} - {e.response.text}")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"❌ Request failed: {str(e)}")
        return None
    except json.JSONDecodeError:
        st.error("❌ Invalid response format from server")
        return None

def format_response(answer: str, query: str) -> str:
    """Format the response with proper markdown."""
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d at %H:%M:%S')
    
    return f"""
## 🤖 AI SQL Assistant Response

**Query:** {query}  
**Generated:** {timestamp}  
**Status:** ✅ Success

---

### 📊 Result:

{answer}

---

*This response was generated by AI. Please verify the results before using them in production.*
"""

def display_chat_history():
    """Display the chat history with proper formatting."""
    # This function is now integrated into main() and not needed separately
    pass

def initialize_session_state():
    """Initialize session state variables."""
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "query_count" not in st.session_state:
        st.session_state.query_count = 0
    if "db_config" not in st.session_state:
        st.session_state.db_config = {
            "host": "localhost",
            "port": "5432",
            "database": "my_database",
            "username": "",
            "password": ""
        }

def render_database_config():
    """Render database configuration section."""
    st.header("🗄️ Database Configuration")
    
    with st.form(key="db_config_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            host = st.text_input(
                "Host",
                value=st.session_state.db_config["host"],
                placeholder="localhost"
            )
            
            database = st.text_input(
                "Database Name",
                value=st.session_state.db_config["database"],
                placeholder="my_database"
            )
            
            username = st.text_input(
                "Username",
                value=st.session_state.db_config["username"],
                placeholder="username"
            )
        
        with col2:
            port = st.text_input(
                "Port",
                value=st.session_state.db_config["port"],
                placeholder="5432"
            )
            
            # Add some spacing to align with the database field
            st.write("")
            st.write("")
            
            password = st.text_input(
                "Password",
                value=st.session_state.db_config["password"],
                type="password",
                placeholder="••••••••"
            )
        
        # Validation message
        if not username or not password:
            st.warning("⚠️ Please fill out all required fields (Username and Password)")
        
        col_save, col_test = st.columns(2)
        with col_save:
            save_config = st.form_submit_button("💾 Save Configuration", use_container_width=True)
        with col_test:
            test_db_connection = st.form_submit_button("🔍 Test DB Connection", use_container_width=True)
        
        if save_config:
            st.session_state.db_config = {
                "host": host,
                "port": port,
                "database": database,
                "username": username,
                "password": password
            }
            if username and password:
                st.success("✅ Database configuration saved successfully!")
            else:
                st.error("❌ Please fill in all required fields")
        
        if test_db_connection:
            if username and password:
                with st.spinner("Testing database connection..."):
                    # You can add actual database connection testing here
                    time.sleep(1)
                    payload = {
                        "host": host,
                        "port": port,
                        "database": database,
                        "username": username,
                        "password": password
                    }
                    # Make API call to test DB connection
                    result = make_api_request("test-db-connection", payload)
                    if result and result.get("success"):
                        st.success("✅ Database connection successful!")
                    else:
                        st.error("❌ Database connection failed. Please check your credentials.")
            else:
                st.error("❌ Please fill in all required fields before testing connection")

def main():
    """Main application function."""
    initialize_session_state()
    
    # Header
    st.title("🔫 AI Powered SQL Dashboard")
    st.markdown("Ask me anything about your database and I'll help you craft the perfect SQL query!")
    
    # Sidebar with information
    with st.sidebar:
        st.header("ℹ️ Information")
        st.markdown("""
        ### How to use:
        1. Configure your database connection
        2. Enter your question in natural language
        3. The AI will generate SQL queries
        4. Results will be displayed below
        
        ### Example queries:
        - "Show all students in CS101"
        - "Count orders by status"
        - "Find top 10 customers by revenue"
        """)
        
        # Connection status
        st.header("🔌 Backend Status")
        if st.button("Test Backend"):
            with st.spinner("Testing connection..."):
                try:
                    response = requests.get(f"{BASE_URL}/health", timeout=5)
                    if response.status_code == 200:
                        st.success("✅ Backend is connected")
                    else:
                        st.error("❌ Backend is not responding")
                except:
                    st.error("❌ Cannot reach backend server")
        
        # Statistics
        st.header("📊 Statistics")
        st.metric("Queries Made", st.session_state.query_count)
        
        # Current DB Config
        st.header("🗄️ Current DB Config")
        config = st.session_state.db_config
        st.text(f"Host: {config['host']}:{config['port']}")
        st.text(f"Database: {config['database']}")
        st.text(f"Username: {config['username']}")
        if config['password']:
            st.text("Password: ••••••••")
        else:
            st.text("Password: Not set")
    
    # Database Configuration Section
    render_database_config()
    
    st.markdown("---")
    
    # Chat History Display
    st.header("💬 Chat History")
    
    # Create a container for chat messages with fixed height
    chat_container = st.container()
    
    with chat_container:
        if st.session_state.messages:
            # Display messages in chronological order
            for message in st.session_state.messages:
                if message["role"] == "user":
                    st.markdown(f'<div class="chat-message user-message"><strong>🧑 You:</strong> {message["content"]}</div>', 
                               unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="chat-message"><strong>🤖 AI:</strong> {message["content"]}</div>', 
                               unsafe_allow_html=True)
        else:
            st.info("💡 No messages yet. Start by asking a question below!")
    
    st.markdown("---")
    
    # Query Input Section (Bottom)
    st.header("💭 Ask Your Question")
    
    # Query form at the bottom
    with st.form(key="query_form", clear_on_submit=True):
        user_input = st.text_area(
            "Enter your query:",
            placeholder="e.g., Show the names and email addresses of all students who are taking the course CS101 in the Fall 2024 semester",
            height=120,
            help="Type your question in natural language and I'll help you generate the appropriate SQL query."
        )
        
        col_submit, col_clear, col_space = st.columns([2, 2, 1])
        with col_submit:
            submit_button = st.form_submit_button("🚀 Send Query", use_container_width=True, type="primary")
        with col_clear:
            clear_button = st.form_submit_button("🗑️ Clear History", use_container_width=True)
    
    # Handle clear history
    if clear_button:
        st.session_state.messages = []
        st.session_state.query_count = 0
        st.success("🧹 Chat history cleared!")
        st.rerun()
    
    # Handle query submission
    if submit_button and user_input.strip():
        # Check if database is configured
        config = st.session_state.db_config
        if not config["username"] or not config["password"]:
            st.error("❌ Please configure your database connection first!")
            return
        
        # Add user message to history
        st.session_state.messages.append({"role": "user", "content": user_input})
        st.session_state.query_count += 1
        
        # Show processing
        with st.spinner("🤖 AI is processing your query..."):
            # Simulate processing time for better UX
            time.sleep(0.5)
            
            # Make API request with database config
            payload = {
                "question": user_input.strip(),
                "db_config": st.session_state.db_config
            }
            result = make_api_request("query", payload)
        
        if result:
            answer = result.get("answer", "No answer returned.")
            
            # Add AI response to history
            st.session_state.messages.append({"role": "assistant", "content": answer})
            
            # Success message
            st.success("✅ Query processed successfully! Check the chat history above.")
            
            # Auto-scroll to top to see the new message
            st.rerun()
        else:
            # Error already displayed by make_api_request function
            pass
    
    # Footer
    st.markdown("---")
    st.markdown("*Powered by AI • Built with Streamlit*")

if __name__ == "__main__":
    main()